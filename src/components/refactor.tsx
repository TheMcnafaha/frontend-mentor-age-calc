import { CalendarInput } from "../components/CalendarInput";
import type { Dispatch, SetStateAction } from "react";
import type { ErrorObj } from "../components/CalendarInput";
import { useState } from "react";
import { NextPage } from "next";
type Display = {
  age: DisplayAge;
  error: string;
};
type TypePropAge = {
  display: Display;
};
type Age = {
  year: number;
  month: number;
  day: number;
};
type DisplayAge = {
  year: number | "--";
  month: number | "--";
  day: number | "--";
};
export type InputAge = {
  year: number | undefined | "YYYY";
  month: number | undefined | "MM";
  day: number | undefined | "DD";
};
type AgeFormInput = {
  age: DisplayAge;
  setInputAge: StateInputAgeFn;
  inputAge: InputAge;
  display: Display;
};

type StateInputAgeFn = Dispatch<SetStateAction<InputAge>>;
export const Refactor: NextPage = () => {
  return <h3> working vooddo </h3>;
  return (
    <>
      <Head>
        <title>Age App Calculator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/calculator-svgrepo-com.svg" />
      </Head>
      <main className="flex  min-h-screen flex-col  items-center  bg-template_off_white font-['Poppins']">
        <CalendarComponent />
        <Refactor />
      </main>
    </>
  );
};
function CalendarComponent() {
  return <h3> working vooddo </h3>;
  //input age servers as the state thats update eveytime the input changes, and when form is submitted & inputAge has passed all tests, inputAge becomes the new age
  const [inputAge, setInputAge] = useState({
    year: "YYYY",
    month: "MM",
    day: "DD",
  } as InputAge);

  const display: Display = getNewDisplayAge(inputAge);
  // const display: Display = { age: { year: 1, month: 1, day: 1 }, error: "lol" };
  return (
    <div className=" mt-20 flex max-w-[340px] flex-col rounded-2xl rounded-br-[4.5em] bg-[#fff] px-6 py-4 shadow-sm lg:max-w-[400px] ">
      <AgeForm
        age={display.age}
        setInputAge={setInputAge}
        inputAge={inputAge}
        display={display}
      ></AgeForm>
      <DisplayResult display={display} />
    </div>
  );
}

function AgeForm({ setInputAge, display }: AgeFormInput) {
  const [dayInput, setDayInput] = useState("DD");

  const [monthInput, setmonthInput] = useState("MM");
  const [yearInput, setyearInput] = useState("YYYY");
  const currentAge = {
    year: parseInt(yearInput, 10),
    month: parseInt(monthInput, 10),
    day: parseInt(dayInput, 10),
  };
  const isYearError = checkForYearError(currentAge);
  const isDayError = checkForDayError(currentAge);
  return (
    <>
      <form
        action=""
        onSubmit={(e) => {
          e.preventDefault();
          if (isInputAgeSound(currentAge)) {
            const nextAge = getAgeDiff(currentAge);
            setInputAge(nextAge);
          } else {
          }
        }}
      >
        <div className="mt-5 flex">
          <CalendarInput
            maxInputLength={2}
            id={"day"}
            errorMessage={"Must be a valid day"}
            defaultValue="DD"
            errorRange={[1, 32]}
            textInput={dayInput}
            setTextInput={setDayInput}
            customError={isDayError}
          ></CalendarInput>
          <CalendarInput
            maxInputLength={2}
            id={"month"}
            errorMessage={"Must be a valid month"}
            defaultValue="MM"
            errorRange={[1, 13]}
            textInput={monthInput}
            setTextInput={setmonthInput}
            customError={false}
          ></CalendarInput>
          <CalendarInput
            maxInputLength={4}
            id={"year"}
            errorMessage={"Must be in the past"}
            defaultValue="YYYY"
            errorRange={[-Infinity, new Date().getFullYear() + 1]}
            textInput={yearInput}
            setTextInput={setyearInput}
            customError={isYearError}
          ></CalendarInput>
        </div>
        <p className=" text-center text-base italic text-template_red">
          {display.error}
        </p>
        <AgeFormSubmit />
      </form>
    </>
  );
}
function DisplayResult({ display }: TypePropAge) {
  return (
    <>
      <h1 className="mb-6 text-5xl font-extrabold italic">
        <span className=" text-template_purple">{display.age.year}</span> years
        <br></br>
        <span className=" text-template_purple">{display.age.month}</span>{" "}
        months
        <br></br>
        <span className=" text-template_purple">{display.age.day}</span> days
      </h1>
    </>
  );
}
function AgeFormSubmit() {
  return (
    <>
      <div className="relative top-[53px] w-full ring-1 ring-template_ligth_grey"></div>
      <div className=" flex min-w-full justify-center lg:justify-end">
        <input
          className="  z-10 mb-4  mt-5 flex h-16 w-16 rounded-full  bg-template_purple p-4 hover:bg-template_off_black"
          id="nextAge"
          type="image"
          src="/icon-arrow.svg"
          alt="downpointing  arrow"
        />
      </div>
    </>
  );
}
export function getNewDisplayAge(currentAge: InputAge): Display {
  const outputAge: DisplayAge = {
    year: "--",
    month: "--",
    day: "--",
  };
  const emptyAge: DisplayAge = {
    year: "--",
    month: "--",
    day: "--",
  };
  // if (currentDisplay.error != "") {
  //   return { age: outputAge, error: currentDisplay.error };
  // }
  const monthNum = makeInputAgeNumber(currentAge.month, [0, 12]);
  const yearNum = makeInputAgeNumber(currentAge.year, [
    0,
    new Date().getFullYear(),
  ]);
  const dayNum = makeInputAgeNumber(currentAge.day, [
    0,
    actualLastDayOfMonth({
      year: yearNum,
      month: monthNum,
      day: makeTS_ReturnNumber(currentAge.day),
    }),
  ]);
  const isNotValidDay = dayNum === -1;
  const isNotValidMonth = monthNum === -1;
  const isNotValidYear = yearNum === -1;
  // check for default values or if all inputs are empty
  if (isNotValidDay || isNotValidMonth || isNotValidYear) {
    return { age: outputAge, error: " " };
  }
  const isYearError = dispayYearError(currentAge);
  const isDayError = checkForDayError(currentAge);
  if (isYearError.isError) {
    return { age: emptyAge, error: isYearError.errorMessage };
  }
  if (isDayError.isError) {
    return { age: emptyAge, error: isDayError.errorMessage };
  }
  outputAge.day = dayNum;
  outputAge.month = monthNum;
  outputAge.year = yearNum;
  return { age: outputAge, error: " " };
}
