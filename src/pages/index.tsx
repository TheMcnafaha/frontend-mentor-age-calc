import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { HTMLInputTypeAttribute, useState } from "react";
const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Age App Calculator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/calculator-svgrepo-com.svg" />
      </Head>
      <main className="flex  min-h-screen flex-col  items-center  bg-template_off_white font-['Poppins']">
        <CalendarComponent />
      </main>
    </>
  );
};

type TypeAge = {
  year: number;
  month: number;
  day: number;
};
type TypePropAge = {
  age: TypeAge;
};
type TypeStateAge = {
  nextAge: Function;
};

class FormatError extends Error {}

function CalendarComponent() {
  const [age, setAge] = useState({ year: 38, month: 3, day: 26 } as TypeAge);
  const test = { month: 11, year: 11, day: 11 } as TypeAge;
  function nextAge(nextAge: TypeAge) {
    setAge(nextAge);
  }
  return (
    <div className=" mt-20 flex max-w-[340px] flex-col rounded-2xl rounded-br-[4.5em] bg-[#fff] px-6 py-4 shadow-sm">
      <form
        action=""
        onSubmit={(e) => {
          e.preventDefault();
          const newAge = fixedNewAgeValueDOM();
          if (!(newAge instanceof Error)) {
            nextAge(newAge);
          }
        }}
      >
        <AgeFormInput />
        <AgeFormSubmit />
      </form>

      <DisplayResult age={age} />
    </div>
  );
}
function AgeFormInput() {
  return (
    <>
      <div className="mt-5 flex">
        <div className="flex w-1/3 flex-col pr-5 ">
          <label
            htmlFor="day"
            className=" text-xs font-light uppercase text-template_smokey_grey"
          >
            Day
          </label>
          <input
            className="m-1  ml-[.10rem] rounded py-1 pl-3 text-xl mix-blend-darken ring-1 ring-template_ligth_grey  "
            type="text"
            inputMode="numeric"
            id="day"
            defaultValue={24}
          />
        </div>

        <div className="flex w-1/3 flex-col pr-5 ">
          <label
            htmlFor="month"
            className=" text-xs font-light uppercase text-template_smokey_grey"
          >
            Month
          </label>
          <input
            className="m-1  ml-[.10rem] rounded py-1 pl-3 text-xl mix-blend-darken ring-1 ring-template_ligth_grey  "
            type="text"
            inputMode="numeric"
            id="month"
            defaultValue={"09"}
          />
        </div>

        <div className="flex w-1/3 flex-col pr-5 ">
          <label
            htmlFor="year"
            className=" text-xs font-light uppercase text-template_smokey_grey"
          >
            Year
          </label>
          <input
            className="m-1  ml-[.10rem] rounded  py-1 pl-3 text-xl mix-blend-darken ring-1 ring-template_ligth_grey  "
            type="text"
            inputMode="numeric"
            id="year"
            defaultValue={1984}
          />
        </div>
      </div>
    </>
  );
}

function AgeFormSubmit() {
  return (
    <>
      <div className="relative top-[53px] w-full ring-1 ring-template_ligth_grey"></div>
      <div className=" flex min-w-full justify-center">
        <input
          className=" z-10 mb-4 mt-5  flex h-16  w-16 rounded-full bg-template_purple p-4 "
          id="nextAge"
          type="image"
          src="/icon-arrow.svg"
          alt="downpointing  arrow"
        />
      </div>
    </>
  );
}

function DisplayResult({ age }: TypePropAge) {
  const myTime: Date = new Date();
  return (
    <>
      <h1 className="  mb-6  text-5xl font-extrabold italic ">
        <span className=" text-template_purple">{age.year}</span> years
        <br></br>
        <span className=" text-template_purple">{age.month}</span> months
        <br></br>
        <span className=" text-template_purple">{age.day}</span> days
      </h1>
    </>
  );
}

// This fn works more like "time till my bday, with years since my bday added" than an aprox of time lived bc this method aligns better with human's view of age
// since age is realitive to bdays, not some binding unir of time like the number of milliseconds since DOB
// however, this approach has "carry over months", meaning a person will often have more months than the year
// eg: a DOB of 2003-11-22 and a present time of 2023-5-22 would have lived for 19 years and 6 months bc while the present year has 5 months, they lived the one month from nov 22 to dec 22 of 2022
// 2+3+2+2+2+2+3+2+2+2+3 +(37+11+39+58+19+37+49+55+41+18+5+43)/60
function getAge(start: Date): TypeAge {

  const age: TypeAge = {
    year: 0,
    month: 0,
    day: 0,
  };
  const present: Date = new Date();
  // in js months start at 0
  const deltaOfMonths = present.getMonth() + 1;
  age.month = deltaOfMonths + 1;
  //get days till next month
  const lastDayOfPresentMonth = new Date(
    present.getFullYear(),
    present.getMonth() + 1,
    0
  ).getDate();
  // age.day = lastDayOfPresentMonth - present.getDate() + start.getDate();
  console.log(lastDayOfPresentMonth);
  // check to see if bday has already passed or not relative to present time
  if (
    present.getMonth() - start.getMonth() < 1 &&
    present.getDate() - start.getDate() < 1
  ) {
    // code only triggers if bday is ahead of present
    age.year = present.getFullYear() - start.getFullYear() - 1;
  } else {
    age.year = present.getFullYear() - start.getFullYear();
  }

  // if current month's day is ahead, on, or behind of start age affects month count
  const dayDelta = start.getDate() - present.getDate();

  if (dayDelta > 0) {
    age.day = dayDelta;
    return age;
  }
  if (dayDelta === 0) {
    return age;
  }
  // code only runs if daydelta<0
  age.month--;
  age.day = lastDayOfPresentMonth - present.getDate() + start.getDate();
  return age;
}


const myDOB: Date = new Date("November 22,2003 ");

console.log(getAge(myDOB));

function fixedNewAgeValueDOM(): TypeAge | Error {
  const newYear = Number(
    (document.getElementById("year") as HTMLInputElement)!.value
  );
  const newMonth = Number(
    (document.getElementById("month") as HTMLInputElement)!.value
  );
  const newDay = Number(
    (document.getElementById("day") as HTMLInputElement)!.value
  );

  if (
    typeof newDay === "number" &&
    typeof newMonth === "number" &&
    typeof newYear === "number"
  ) {
    // input has been sanitanized so far but not processed
  
    const inputTime = new Date(newYear, newMonth, newDay);
    return getAge( inputTime);
  }

  throw new FormatError("data must be number");
}

export default Home;
