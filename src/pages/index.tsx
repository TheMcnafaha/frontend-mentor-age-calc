import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { useState } from "react";
const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Age App Calculator</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/calculator-svgrepo-com.svg" />
      </Head>
      <main className="flex  min-h-screen flex-col  items-center  bg-template_off_white font-['Poppins']">
        <CalendarComponent />
      </main>
    </>
  );
};

type TypeAge = {
  year: number;
  month: number;
  day: number;
};
type TypePropAge = {
  age: TypeAge;
};
type TypeStateAge = {
  nextAge: Function;
};

function CalendarComponent() {
  const [age, setAge] = useState({ year: 38, month: 3, day: 26 } as TypeAge);
  const test = { month: 11, year: 11, day: 11 } as TypeAge;
  function nextAge(nextAge: TypeAge) {
    setAge(nextAge);
  }
  return (
    <div className=" mt-20 flex max-w-[340px] flex-col rounded-2xl rounded-br-[4.5em] bg-[#fff] px-6 py-4 shadow-sm">
      <form action="" onClick={() => nextAge(test)}>
      <AgeFormInput />
      <AgeFormSubmit/>
      </form>
      
      <DisplayResult age={age} />
    </div>
  );
}
function AgeFormInput() {
  return (
    <>
      <div className="mt-5 flex">
        <div className="flex w-1/3 flex-col pr-5 ">
          <label
            htmlFor="day"
            className=" text-xs font-light uppercase text-template_smokey_grey"
          >
            Day
          </label>
          <input
            className="m-1  ml-[.10rem] rounded py-1 pl-3 text-xl mix-blend-darken ring-1 ring-template_ligth_grey  "
            type="text"
            inputMode="numeric"
            pattern="d?d"
            id="day"
            defaultValue={24}
          />
        </div>

        <div className="flex w-1/3 flex-col pr-5 ">
          <label
            htmlFor="month"
            className=" text-xs font-light uppercase text-template_smokey_grey"
          >
            Month
          </label>
          <input
            className="m-1  ml-[.10rem] rounded py-1 pl-3 text-xl mix-blend-darken ring-1 ring-template_ligth_grey  "
            type="text"
            inputMode="numeric"
            pattern="d?d"
            id="month"
            defaultValue={"09"}
          />
        </div>

        <div className="flex w-1/3 flex-col pr-5 ">
          <label
            htmlFor="year"
            className=" text-xs font-light uppercase text-template_smokey_grey"
          >
            Year
          </label>
          <input
            className="m-1  ml-[.10rem] rounded  py-1 pl-3 text-xl mix-blend-darken ring-1 ring-template_ligth_grey  "
            type="text"
            inputMode="numeric"
            pattern="dddd"
            id="year"
            defaultValue={1984}
          />
        </div>
      </div>
    </>
  );
}

function AgeFormSubmit() {
  
  return (
    <>
      <div className="relative top-[53px] w-full ring-1 ring-template_ligth_grey"></div>
      <div className=" flex min-w-full justify-center">
        <input
          className=" mb-4 mt-5 flex  h-16 w-16  rounded-full bg-template_purple p-4 z-10 "
          id="nextAge"
          type="image"
          src="/icon-arrow.svg"
          alt="downpointing  arrow"
        />
      </div>
    </>
  );
}

function DisplayResult({ age }: TypePropAge) {
  const myTime: Date = new Date();
  return (
    <>
      <h1 className="  mb-6  text-5xl font-extrabold italic ">
        <span className=" text-template_purple">{age.year}</span> years
        <br></br>
        <span className=" text-template_purple">{age.month}</span> months
        <br></br>
        <span className=" text-template_purple">{age.day}</span> days
      </h1>
    </>
  );
}

function getTimeFromUnixEpochs(start: number, end: number): string {
  //constants as milliseconds
  const year = 31_556_952_000;
  let delta = start - end;

  if (delta % year === 0) {
    return `${Math.floor(delta / year)} years`;
  }
  let output: string = "";
  output = `${Math.floor(delta / year)} years`;
  delta = delta % year;

  //constants as milliseconds
  const month = 2_629_746_000;

  if (delta % month === 0) {
    return (output += `\n${Math.floor(delta / month)} months`);
  }

  //constants as milliseconds
  const day = 86_400_000;
  return (output += `\n${Math.floor(delta / month)} months \n${Math.floor(
    (delta % month) / day
  )} days`);
}

const today: Date = new Date();
const myDOB: Date = new Date("November 22,2003 ");

console.log(getTimeFromUnixEpochs(today.getTime(), myDOB.getTime()));

export default Home;
